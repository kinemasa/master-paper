import json
import re
import tkinter as tk
from tkinter import filedialog
from pathlib import Path
import os
from myutils.select_folder import select_file

# --- GUI初期化 ---
root = tk.Tk()
root.withdraw()

# --- JSONファイルを選択 ---
json_path = select_file(message="jsonファイルを選択してください")

if not json_path:
    raise SystemExit("❌ JSONファイルが選択されませんでした")

# --- 設定 ---
num_subject_ids = ['1020', '1024', '1035', '1091', '1097', '1099', '1107', '1113', '1115', '1149', '1156', '1176', '1180', '1181', '1213', '1217', '1234', '1259', '1266', '1275', '1285', '1287', '1292', '1298', '1305', '1314', '1360', '1362', '1386', '1399', '1414', '1442', '1474', '1477', '1513', '1531', '1541', '1543', '1563', '1581', '1589', '1601', '1609', '1610', '1649', '1672', '1715', '1745', '1749', '1760', '1765', '1785', '1790', '1838', '1859', '1922', '1932', '1943', '1973', '1981', '2003', '2022', '2091', '2110', '2120', '2147', '2149', '2153', '2161', '2183', '2187', '2194', '2221', '2233', '2242', '2245', '2246', '2247', '2253', '2284', '2285', '2291', '2323', '2339', '2375', '2414', '2439', '2445', '2446', '2459', '2462', '2463', '2508', '2527', '2558', '2619', '2625', '2638', '2646', '2651', '2659', '2672', '2676', '2704', '2732', '2751', '2755', '2778', '2801', '2802', '2818', '2823', '2842', '2851', '2852', '2857', '2874', '2875', '2895', '2907', '2916', '2928', '2948', '2962', '2964', '2967', '2968', '3000', '3006', '3016', '3059', '3066', '3077', '3096', '3133', '3155', '3180', '3192', '3194', '3196', '3220', '3232', '3235', '3245', '3254', '3315', '3326', '3342', '3345', '3348', '3351', '3363', '3364', '3375', '3385', '3394', '3401', '3406', '3418', '3420', '3448', '3465', '3494', '3508', '3520', '3523', '3524', '3526', '3529', '3533', '3554', '3557', '3571', '3581', '3593', '3600', '3625', '3636', '3656', '3658', '3682', '3683', '3699', '3700', '3701', '3732', '3735', '3738', '3754', '3763', '3778', '3780', '3783', '3784', '3797', '3833', '3889', '3906', '3930', '3957', '3962', '4016', '4055', '4073', '4074', '4087', '4119', '4172', '4173', '4179', '4182', '4187', '4211', '4225', '4249', '4256', '4264', '4295', '4307', '4311', '4312', '4321', '4322', '4332', '4354', '4356', '4397', '4404', '4430', '4434', '4440', '4448', '4479', '4482', '4488', '4493', '4504', '4519', '4532', '4546', '4551', '4557', '4571', '4577', '4610', '4617', '4639', '4646', '4685', '4691', '4698', '4704', '4718', '4724', '4731', '4754', '4784', '4815', '4822', '4844', '4874', '4892', '4902', '4909', '4929', '4932', '4936', '4937', '4952', '4968', '5003', '5031', '5044', '5074', '5078', '5096', '5123', '5125', '5130', '5138', '5148', '5156', '5174', '5207', '5214', '5215', '5217', '5223', '5228', '5237', '5243', '5250', '5287', '5288', '5292', '5307', '5308', '5332', '5347', '5353', '5356', '5394', '5395', '5441', '5483', '5486', '5500', '5507', '5524', '5526', '5533', '5535', '5536', '5543', '5550', '5562', '5563', '5564', '5587', '5626', '5637', '5644', '5646', '5676', '5719', '5721', '5733', '5734', '5785', '5790', '5796', '5800', '5811', '5822', '5833', '5860', '5904', '5909', '5921', '5928', '5938', '5948', '5974', '5980', '5989', '6008', '6028', '6031', '6042', '6066', '6082', '6091', '6097', '6114', '6127', '6137', '6145', '6176', '6193', '6223', '6245', '6255', '6277', '6281', '6289', '6304', '6307', '6329', '6334', '6340', '6354', '6361', '6368', '6397', '6401', '6411', '6420', '6422', '6425', '6427', '6473', '6477', '6495', '6503', '6537', '6599', '6604', '6631', '6667', '6678', '6698', '6718', '6725', '6731', '6737', '6750', '6782', '6803', '6846', '6847', '6856', '6880', '6916', '6923', '6968', '6974', '6987', '6993', '7006', '7047', '7048', '7050', '7056', '7069', '7137', '7142', '7151', '7165', '7176', '7185', '7186', '7187', '7211', '7222', '7231', '7233', '7248', '7279', '7280', '7362', '7376', '7380', '7396', '7412', '7437', '7445', '7456', '7473', '7509', '7514', '7519', '7520', '7539', '7542', '7557', '7568', '7570', '7576', '7596', '7598', '7601', '7604', '7626', '7628', '7637', '7685', '7695', '7736', '7748', '7759', '7769', '7788', '7793', '7831', '7864', '7865', '7878', '7889', '7901', '7927', '7928', '7942', '7957', '7959', '7969', '7983', '7997', '8001', '8009', '8021', '8147', '8213', '8262', '8266', '8290', '8331', '8364', '8370', '8377', '8380', '8381', '8384', '8412', '8428', '8430', '8432', '8490', '8500', '8514', '8517', '8540', '8541', '8550', '8555', '8563', '8565', '8584', '8587', '8603', '8661', '8664', '8679', '8681', '8706', '8718', '8730', '8738', '8768', '8772', '8785', '8802', '8808', '8817', '8834', '8844', '8847', '8848', '8852', '8874', '8897', '8902', '9003', '9028', '9039', '9064', '9077', '9092', '9098', '9105', '9115', '9118', '9139', '9141', '9146', '9153', '9160', '9163', '9174', '9199', '9211', '9229', '9256', '9282', '9283', '9286', '9292', '9305', '9308', '9309', '9396', '9401', '9425', '9464', '9486', '9512', '9519', '9554', '9597', '9620', '9629', '9640', '9676', '9711', '9715', '9720', '9725', '9737', '9739', '9753', '9779', '9808', '9825', '9827', '9833', '9869', '9884', '9891', '9922', '9938', '9940', '9957', '9968', '9980', '9981', '9987', '9998', '7082', '3153', '3150', '3142']
new_roi_name = "glabella_before"

# --- JSON読み込み ---
with open(json_path, "r", encoding="utf-8") as f:
    data = json.load(f)

for new_subject_id in num_subject_ids:
    data["subject_id"] = new_subject_id
    data["roi_name"] = new_roi_name

    new_paths = {}
    for key, old_path in data["paths"].items():
        # ✅ 常に "deep-learning-dataset" を探し、そこまでのパスをベースにする
        old_path_obj = Path(old_path)
        parts = old_path_obj.parts
        if "deep-learning-dataset" in parts:
            base_idx = parts.index("deep-learning-dataset")
            base_dir = Path(*parts[:base_idx + 1])  # deep-learning-datasetまで
        else:
            base_dir = old_path_obj.parent  # fallback

        # keyごとのフォルダ名
        subfolder = f"{key.upper()}_{new_roi_name}"
        new_dir = base_dir / subfolder

        # 新しいファイル名
        new_filename = f"{new_subject_id}.csv"

        # 新しいフルパス
        new_path = str(new_dir / new_filename)
        new_paths[key] = new_path

    data["paths"] = new_paths

    # JSON保存
    new_json_dir = os.path.dirname(json_path)
    new_json_filename = f"{new_subject_id}_{new_roi_name}.json"
    new_json_path = os.path.join(new_json_dir, new_json_filename)

    with open(new_json_path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

print("✅ JSON作成完了:", new_json_path)
